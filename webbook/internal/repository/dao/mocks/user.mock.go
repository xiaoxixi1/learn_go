// Code generated by MockGen. DO NOT EDIT.
// Source: ./webbook/internal/repository/dao/user.go
//
// Generated by this command:
//
//	mockgen -source=./webbook/internal/repository/dao/user.go -package=daomocks -destination=./webbook/internal/repository/dao/mocks/user.mock.go
//

// Package daomocks is a generated GoMock package.
package daomocks

import (
	context "context"
	dao "project_go/webbook/internal/repository/dao"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserDao is a mock of UserDao interface.
type MockUserDao struct {
	ctrl     *gomock.Controller
	recorder *MockUserDaoMockRecorder
}

// MockUserDaoMockRecorder is the mock recorder for MockUserDao.
type MockUserDaoMockRecorder struct {
	mock *MockUserDao
}

// NewMockUserDao creates a new mock instance.
func NewMockUserDao(ctrl *gomock.Controller) *MockUserDao {
	mock := &MockUserDao{ctrl: ctrl}
	mock.recorder = &MockUserDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDao) EXPECT() *MockUserDaoMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockUserDao) Insert(cxt context.Context, user *dao.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", cxt, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockUserDaoMockRecorder) Insert(cxt, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserDao)(nil).Insert), cxt, user)
}

// QueryByEmail mocks base method.
func (m *MockUserDao) QueryByEmail(cxt context.Context, email string) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByEmail", cxt, email)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryByEmail indicates an expected call of QueryByEmail.
func (mr *MockUserDaoMockRecorder) QueryByEmail(cxt, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByEmail", reflect.TypeOf((*MockUserDao)(nil).QueryByEmail), cxt, email)
}

// QueryById mocks base method.
func (m *MockUserDao) QueryById(cxt context.Context, userid int64) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryById", cxt, userid)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryById indicates an expected call of QueryById.
func (mr *MockUserDaoMockRecorder) QueryById(cxt, userid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryById", reflect.TypeOf((*MockUserDao)(nil).QueryById), cxt, userid)
}

// QueryByPhone mocks base method.
func (m *MockUserDao) QueryByPhone(cxt context.Context, phone string) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByPhone", cxt, phone)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryByPhone indicates an expected call of QueryByPhone.
func (mr *MockUserDaoMockRecorder) QueryByPhone(cxt, phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByPhone", reflect.TypeOf((*MockUserDao)(nil).QueryByPhone), cxt, phone)
}

// Update mocks base method.
func (m *MockUserDao) Update(cxt context.Context, user dao.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", cxt, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserDaoMockRecorder) Update(cxt, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserDao)(nil).Update), cxt, user)
}
