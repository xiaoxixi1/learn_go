// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"project_go/webbook/internal/repository"
	"project_go/webbook/internal/repository/cache/freecache"
	"project_go/webbook/internal/repository/cache/redis"
	"project_go/webbook/internal/repository/dao"
	"project_go/webbook/internal/service"
	"project_go/webbook/internal/web"
	"project_go/webbook/ioc"
)

// Injectors from wire.go:

/*
*

	这里有一个冲突的点是：在使用wire的时候，初始化方法NewXXXX最好返回接口
	但是go的推荐做法是返回具体类型，这和wire是冲突的
*/
func InitWebServer() *gin.Engine {
	cmdable := ioc.InitRedis()
	v := ioc.InitGinMiddlewares(cmdable)
	db := ioc.InitDb()
	userDao := dao.NewUserDao(db)
	userCache := redis.NewUserCache(cmdable)
	userRepository := repository.NewUseRepository(userDao, userCache)
	userService := service.NewUserService(userRepository)
	cache := ioc.InitFreeCache()
	codeCache := freecache.NewCodeFreeCache(cache)
	codeRepo := repository.NewCodeRepo(codeCache)
	smsService := ioc.InitSmsSendService()
	codeService := service.NewCodeService(codeRepo, smsService)
	userHandler := web.NewUserHandler(userService, codeService)
	wechatService := ioc.InitWeChatOAuthService()
	oAuth2WechatHandler := web.NewOAuth2WechatHandler(wechatService, userService)
	engine := ioc.InitWebServer(v, userHandler, oAuth2WechatHandler)
	return engine
}
